<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.swim4.swim.board.dao.BoardMapper">
	<!-- 글쓰기 -->
	<insert id="boardWrite" parameterType="Board">
		insert into
			board3
			(
				boardnum
				,id
				,title
				,content
				<if test="originalfile != null and originalfile != '' ">
				,originalfile
				,savedfile
				</if>
			)
			values
			(
				board3_seq.nextval
				,#{id}
				,#{title}
				,#{content}
				<if test="originalfile != null and originalfile != '' ">
				,#{originalfile}
				,#{savedfile}
				</if>
			)
	</insert>
	
	<!-- 글목록 + 검색 -->
	<select id="boardList" parameterType="map" resultType="Board">
		select
			boardnum
			,id
			,title
			,content
			,to_char(inputdate, 'yy-MM-dd') inputdate
			,hits
			,originalfile
			,savedfile
			,(select count(*) from reply3 where reply3.boardnum=board3.boardnum) replyCount
		from
			board3
		<!-- _parameter를 써야 단일로 보낸 String 타입을 인식할 수 있다! -->
		<if test="searchText != null and searchText != ''">
		where
			<choose>
				<when test="searchType == 'title'">
					title like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'content'">
					content like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'id'">
					id like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'tc'">
					title like '%' || #{searchText} || '%' or content like '%' || #{searchText} || '%'
				</when>
			</choose>
		</if>
		order by
			boardnum desc
	</select>
	
	<select id="boardCount" parameterType="map" resultType="int">
		select 
			count(*)
		from 
			board3
		<if test="searchText != null and searchText != ''">
		where
			<choose>
				<when test="searchType == 'title'">
					title like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'content'">
					content like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'id'">
					id like '%' || #{searchText} || '%'
				</when>
				<when test="searchType == 'tc'">
					title like '%' || #{searchText} || '%' or content like '%' || #{searchText} || '%'
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 글 하나 불러오기 -->
	<select id="selectOneBoard" parameterType="int" resultType="Board">
		select
			boardnum
			,id
			,title
			,content
			,inputdate
			,hits
			,originalfile
			,savedfile
		from
			board3
		where
			boardnum=#{boardnum}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHits" parameterType="int">
		update
			board3
		set
			hits = hits+1
		where
			boardnum=#{boardnum}
	</update>
	
	<!-- 글삭제 -->
	<delete id="boardDelete" parameterType="Board">
		delete from
			board3
		where 
			boardnum=#{boardnum}
			and
			id=#{id}
	</delete>
	
	<!-- 글수정 -->
	<update id="boardUpdate" parameterType="Board">
		update
			board3
		set
			title=#{title}
			,content=#{content}
			<if test="originalfile != null and originalfile != '' ">
			,originalfile=#{originalfile}
			,savedfile=#{savedfile}
			</if>
		where
			boardnum=#{boardnum}
			and
			id=#{id}
	</update>
	
	<insert id="insertReply" parameterType="Reply">
		insert into
			reply3
			(
				replynum
				,boardnum
				,id
				,text
				,groupnum
				,groupseq
				,parentnum
			) values(
				reply3_seq.nextval
				,#{boardnum}
				,#{id}
				,#{text}
				,#{groupnum}
				,#{groupseq}
				,#{parentnum}
			)
		<selectKey keyProperty="replynum" resultType="Integer" order="AFTER"> 
			SELECT 
				reply3_seq.currval 
			FROM 
				dual
		</selectKey>
	</insert>
	
	<delete id="deleteReply" parameterType="reply">
		delete 
			reply3
		where
			replynum = #{replynum}
		and
			id = #{id} 
	</delete>
	
	<update id="updateReplyDel" parameterType="reply">
		update
			reply3
		set
			replydel='Y'
		where
			replynum = #{replynum}
		and
			id=#{id}
	</update>
	<update id="updateReply" parameterType="reply">
		update
			reply3
		set
			text=#{text}
		where
			replynum = #{replynum}
		and
			id=#{id}
	</update>
	
	<update id="updateReplyGroup" parameterType="reply">
		update
			reply3
		set
			groupnum=#{groupnum}
		where
			replynum = #{replynum}
		and
			id=#{id}
	</update>
	
	<select id="selectOneReply" parameterType="int" resultType="reply">
		select
			replynum
			,boardnum
			,id
			,text
			,inputdate
			,groupnum
			,groupseq
			,parentnum
		from
			reply3
		where
			replynum=#{replynum}
	</select>
	
	<select id="replyList" parameterType="int" resultType="Reply">
		select * from
	    (
	        select rownum as rnum,
	            data.*
	        from
	        (
	            select level
	                ,replynum
	                ,boardnum
	                ,id
	                ,text
	                ,inputdate
	                ,groupnum
	                ,groupseq
	                ,parentnum
	                ,replydel
	            from
	                reply3
	            where
	            	boardnum=#{boardnum}
	            start with parentnum = 0
	            connect by prior replynum = parentnum
	            order siblings by groupnum asc
	        )
	        data
	    )
		where rnum>=1
	</select>
</mapper>